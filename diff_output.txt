diff --git a/apps/backend/src/app.module.ts b/apps/backend/src/app.module.ts
index cf689c0..95d660f 100644
--- a/apps/backend/src/app.module.ts
+++ b/apps/backend/src/app.module.ts
@@ -4,10 +4,20 @@ import { AppService } from './modules/services/app.service';
 import { HelloController } from './modules/controllers/hello.controller';
 import { PdfController } from './modules/controllers/pdf.controller';
 import { PdfService } from './modules/services/pdf.service';
+import { InMemoryPDFRepository } from './modules/repositories/in-memory-pdf-repository';
+import { IPDFRepository } from './modules/repositories/pdf-repository.interface';
+import { PDF_REPOSITORY } from './modules/repositories/pdf-repository.interface';
 
 @Module({
   imports: [],
   controllers: [AppController, HelloController, PdfController],
-  providers: [AppService, PdfService],
+  providers: [
+    AppService,
+    PdfService,
+    {
+      provide: PDF_REPOSITORY,
+      useClass: InMemoryPDFRepository,
+    },
+  ],
 })
 export class AppModule {}
diff --git a/apps/backend/src/modules/controllers/pdf.controller.ts b/apps/backend/src/modules/controllers/pdf.controller.ts
index 599d801..67909f4 100644
--- a/apps/backend/src/modules/controllers/pdf.controller.ts
+++ b/apps/backend/src/modules/controllers/pdf.controller.ts
@@ -11,49 +11,25 @@ import {
 import { FileInterceptor } from '@nestjs/platform-express';
 import { PdfService } from '../services/pdf.service';
 import { Request, Response } from 'express';
-import { diskStorage } from 'multer';
-import * as path from 'path';
-import * as fs from 'fs';
 
 @Controller('pdf')
 export class PdfController {
   constructor(private readonly pdfService: PdfService) {}
 
   @Post('upload')
-  @UseInterceptors(
-    FileInterceptor('file', {
-      storage: diskStorage({
-        destination: './uploads', // Specify the uploads folder
-        filename: (req, file, cb) => {
-          // Generate a unique filename
-          const uniqueSuffix =
-            Date.now() + '-' + Math.round(Math.random() * 1e9);
-          const ext = path.extname(file.originalname);
-          cb(null, `${file.fieldname}-${uniqueSuffix}${ext}`);
-        },
-      }),
-    }),
-  )
+  @UseInterceptors(FileInterceptor('file'))
   async uploadPdf(
     @UploadedFile() file: Express.Multer.File,
     @Res() res: Response,
-    @Req() req: Request, // Inject the request object
+    @Req() req: Request,
   ) {
     if (!file) {
       throw new BadRequestException('No file uploaded');
     }
 
-    // Read the file from disk
-    const filePath = path.resolve(file.path);
-    const fileBuffer = fs.readFileSync(filePath);
+    const pdfDocument = await this.pdfService.processAndSavePdf(file);
 
-    await this.pdfService.extractText(fileBuffer);
-
-    // Reset the conversation when a new PDF is uploaded
-    this.pdfService.resetConversation();
-
-    // Build the file URL
-    const fileUrl = `${req.protocol}://${req.get('host')}/uploads/${file.filename}`;
+    const fileUrl = `${req.protocol}://${req.get('host')}/uploads/${pdfDocument.id}`;
 
     res.status(200).json({
       message: 'PDF uploaded and text extracted.',
diff --git a/apps/backend/src/modules/repositories/in-memory-pdf-repository.ts b/apps/backend/src/modules/repositories/in-memory-pdf-repository.ts
new file mode 100644
index 0000000..5abc699
--- /dev/null
+++ b/apps/backend/src/modules/repositories/in-memory-pdf-repository.ts
@@ -0,0 +1,67 @@
+import { Injectable } from '@nestjs/common';
+import { IPDFRepository } from './pdf-repository.interface';
+import { PDFDocument } from './pdf-document.interface';
+import * as fs from 'fs';
+import * as path from 'path';
+import * as pdf from 'pdf-parse';
+
+@Injectable()
+export class InMemoryPDFRepository implements IPDFRepository {
+  private documents: Map<string, PDFDocument> = new Map();
+  private uploadDir = './uploads';
+
+  async save(file: Express.Multer.File): Promise<PDFDocument> {
+    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
+    const filename = `${file.fieldname}-${uniqueSuffix}${path.extname(file.originalname)}`;
+    const filepath = path.join(this.uploadDir, filename);
+
+    // Ensure upload directory exists
+    if (!fs.existsSync(this.uploadDir)) {
+      fs.mkdirSync(this.uploadDir, { recursive: true });
+    }
+
+    // Write file to disk
+    fs.writeFileSync(filepath, file.buffer);
+
+    const extractedText = await this.extractText(filename);
+
+    const pdfDocument: PDFDocument = {
+      id: filename,
+      content: extractedText,
+      uploadDate: new Date(),
+    };
+
+    this.documents.set(pdfDocument.id, pdfDocument);
+    return pdfDocument;
+  }
+
+  async getById(id: string): Promise<PDFDocument | null> {
+    return this.documents.get(id) || null;
+  }
+
+  async getAll(): Promise<PDFDocument[]> {
+    return Array.from(this.documents.values());
+  }
+
+  async delete(id: string): Promise<void> {
+    const document = this.documents.get(id);
+    if (document) {
+      const filepath = path.join(this.uploadDir, document.id);
+      if (fs.existsSync(filepath)) {
+        fs.unlinkSync(filepath);
+      }
+      this.documents.delete(id);
+    }
+  }
+
+  async extractText(id: string): Promise<string> {
+    const filepath = path.join(this.uploadDir, id);
+    if (!fs.existsSync(filepath)) {
+      throw new Error('File not found');
+    }
+
+    const dataBuffer = fs.readFileSync(filepath);
+    const pdfData = await pdf(dataBuffer);
+    return pdfData.text;
+  }
+}
diff --git a/apps/backend/src/modules/repositories/pdf-document.interface.ts b/apps/backend/src/modules/repositories/pdf-document.interface.ts
new file mode 100644
index 0000000..9b82c1e
--- /dev/null
+++ b/apps/backend/src/modules/repositories/pdf-document.interface.ts
@@ -0,0 +1,5 @@
+export interface PDFDocument {
+  id: string;
+  content: string;
+  uploadDate: Date;
+}
diff --git a/apps/backend/src/modules/repositories/pdf-repository.interface.ts b/apps/backend/src/modules/repositories/pdf-repository.interface.ts
new file mode 100644
index 0000000..a110380
--- /dev/null
+++ b/apps/backend/src/modules/repositories/pdf-repository.interface.ts
@@ -0,0 +1,10 @@
+import { PDFDocument } from './pdf-document.interface';
+
+export interface IPDFRepository {
+  save(file: Express.Multer.File): Promise<PDFDocument>;
+  getById(id: string): Promise<PDFDocument | null>;
+  getAll(): Promise<PDFDocument[]>;
+  delete(id: string): Promise<void>;
+}
+
+export const PDF_REPOSITORY = 'PDF_REPOSITORY';
diff --git a/apps/backend/src/modules/services/pdf.service.ts b/apps/backend/src/modules/services/pdf.service.ts
index cdcc59f..2998211 100644
--- a/apps/backend/src/modules/services/pdf.service.ts
+++ b/apps/backend/src/modules/services/pdf.service.ts
@@ -1,7 +1,12 @@
-import { Injectable, Logger } from '@nestjs/common';
+import { Injectable, Inject, Logger } from '@nestjs/common';
 import * as pdf from 'pdf-parse';
 import OpenAI from 'openai';
 import { Response } from 'express';
+import {
+  IPDFRepository,
+  PDF_REPOSITORY,
+} from '../repositories/pdf-repository.interface';
+import { PDFDocument } from '../repositories/pdf-document.interface';
 
 @Injectable()
 export class PdfService {
@@ -9,24 +14,35 @@ export class PdfService {
   private openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
   private pdfText: string;
 
-  // New: Store the conversation messages
+  constructor(@Inject(PDF_REPOSITORY) private pdfRepository: IPDFRepository) {}
+
   private conversation: Array<{
     role: 'system' | 'user' | 'assistant';
     content: string;
   }> = [];
 
-  async extractText(buffer: Buffer): Promise<string> {
+  async processAndSavePdf(file: Express.Multer.File): Promise<PDFDocument> {
+    try {
+      const pdfDocument = await this.pdfRepository.save(file);
+      this.pdfText = pdfDocument.content;
+      this.resetConversation();
+      return pdfDocument;
+    } catch (error) {
+      this.logger.error(`Error processing and saving PDF: ${error.message}`);
+      throw error;
+    }
+  }
+
+  private async extractText(buffer: Buffer): Promise<string> {
     try {
       const data = await pdf(buffer);
-      this.pdfText = data.text;
-      return this.pdfText;
+      return data.text;
     } catch (error) {
       this.logger.error(`Error extracting PDF text: ${error.message}`);
       throw error;
     }
   }
 
-  // New: Reset conversation when a new PDF is uploaded
   resetConversation() {
     this.conversation = [
       {
